pipeline {
  agent {
    docker {
      image 'thanhtha/jenkins-agent:java-v17-mvn'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Check Information') {
      steps {
        sh 'java -version'
        sh 'cat cat /etc/passwd | grep "jenkins"'
      }
    }
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'master', url: 'https://github.com/tnubeo1111/cicd-repo.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        // Change owner Jenkins
        sh 'chown -R jenkins:jenkins java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.25.216.100:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "thanhtha/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-thanhtha')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-thanhtha") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Test Docker Image') {
      steps {
        script {
          // Kiểm tra container nào đang chiếm port 8010 và dừng nó nếu có
          sh '''
            PORT_IN_USE=$(docker ps --format '{{.ID}} {{.Ports}}' | grep '0.0.0.0:8010->' | awk '{print $1}')
            if [ -n "$PORT_IN_USE" ]; then
              echo "Stopping container using port 8010: $PORT_IN_USE"
              docker stop $PORT_IN_USE
            fi
          '''
           // Khởi chạy container mới
          // Chạy container
            sh 'docker run --rm -d -p 8010:8080 --name test_container thanhtha/ultimate-cicd:${BUILD_NUMBER}'

            // In logs nếu cần debug
            sh 'docker ps -a | grep test_container || true'
            // Cleanup container
            sh 'docker stop test_container || true'
        }
      }
    }
    // stage('Update Deployment File') {
    //     environment {
    //         GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    //         GIT_USER_NAME = "iam-veeramalla"
    //     }
    //     steps {
    //         withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
    //             sh '''
    //                 git config user.email "abhishek.xyz@gmail.com"
    //                 git config user.name "Abhishek Veeramalla"
    //                 BUILD_NUMBER=${BUILD_NUMBER}
    //                 sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
    //                 git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
    //                 git commit -m "Update deployment image to version ${BUILD_NUMBER}"
    //                 git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
    //             '''
    //         }
    //     }
    // }
  }
}
